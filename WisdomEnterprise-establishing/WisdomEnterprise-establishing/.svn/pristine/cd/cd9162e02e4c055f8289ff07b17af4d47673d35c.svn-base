package cn.sirbox.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.sun.org.glassfish.external.probe.provider.annotations.ProbeParam;

import cn.sirbox.model.Area;
import cn.sirbox.model.City;
import cn.sirbox.model.Enterprise;
import cn.sirbox.model.Province;
import cn.sirbox.model.Result;
import cn.sirbox.model.UserEnterpriseKey;
import cn.sirbox.model.UserU;
import cn.sirbox.model.page;
import cn.sirbox.service.impl.EnterpriseService;
import cn.sirbox.service.impl.UserUService;
import cn.sirbox.utils.ExcelUtil;
import cn.sirbox.utils.config;

@Controller
@RequestMapping("/enterprise")
public class EnterpriseController {
	@Autowired
	private EnterpriseService enterpriseService;
	
	@Autowired
    private UserUService userUservice;
	
	
	//进入企业列表
	@RequestMapping("/list")
	public String list(Model model,Integer thispage,HttpServletRequest request){
			if(thispage==null){
				thispage=0;
			}
			Integer count=enterpriseService.countByExample();
            Integer page1=count%(page.pagenumber)==0?count/(page.pagenumber):count/(page.pagenumber)+1;
            model.addAttribute("page1", page1);
            String s=config.getKeyValue(request.getRealPath("/"),"pagenumber");
            int pagenumber=Integer.parseInt(s);
            if(thispage<page1 && thispage>=0){
                
            	 List<Enterprise> list = enterpriseService.selectAllEnterprise(thispage,pagenumber);
            	 model.addAttribute("list", list);
            	 model.addAttribute("thispage", thispage+1);
            }else if(thispage<0){
                
            	 List<Enterprise> list = enterpriseService.selectAllEnterprise(thispage+1,pagenumber);
            	 model.addAttribute("list", list);
            	 model.addAttribute("thispage", thispage+2);
            }else{
                
            	 List<Enterprise> list = enterpriseService.selectAllEnterprise(thispage-1,pagenumber);
            	 model.addAttribute("list", list);
            	 model.addAttribute("thispage", thispage);
            }
           
            
       
		
		return "enterpriselist";
	}
	
	//进入企业添加页面
	@RequestMapping("/addenterprise")
	public String addenterprise(Model model){
		List<Province> provice=enterpriseService.getProvince();
		model.addAttribute("map",provice);
		Map<String,List<String>> map1=getType();
		model.addAttribute("map1",map1);
            
		return "addenterprise";
	}
	//企业添加
	@RequestMapping("/addenter")
	public String addenter(String time,UserU userU,Enterprise enterprise,HttpServletRequest request,
	        Model model,@RequestParam(value = "business") MultipartFile file,@RequestParam(value = "tex") MultipartFile file1,
	        String address1,String address2,String address3,String address4) throws ParseException{
	 String eaddress=address1+"-"+address2+"-"+address3+"-"+address4;
	 String str=request.getRealPath("/");
   	 String fileName = new Date().getTime()+".png";
   	 
   	 String m=str+"images\\enterprise\\"+fileName;
   	 String m1=str+"images\\enterprise\\tex\\"+fileName;
   	 if(file!=null){
   		try {
   	   	 byte[] bytes = file.getBytes();
   	        BufferedOutputStream stream = new BufferedOutputStream(
   	                new FileOutputStream(new File(m)));
   			stream.write(bytes);
   			  stream.close();
   			enterprise.setEbusiness(fileName);
   		} catch (IOException e) {
   			// TODO Auto-generated catch block
   			e.printStackTrace();
   		}
   	 }
   	if(file1!=null){
   		try {
   	   	 byte[] bytes1 = file1.getBytes();
   	        BufferedOutputStream stream1 = new BufferedOutputStream(
   	        		new FileOutputStream(new File(m1)));
   			stream1.write(bytes1);
   			  stream1.close();
   			enterprise.setEtex(fileName);
   		} catch (IOException e) {
   			// TODO Auto-generated catch block
   			e.printStackTrace();
   		}
   	}
   	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
   	if(time!=null){enterprise.setEtime(sdf.parse(time));}
   	enterprise.setEstatus(1);
   	enterprise.setEaddress(eaddress);
   	enterpriseService.insertSelective(userU,enterprise);
		int thispage=0;
		Integer count=enterpriseService.countByExample();
        Integer page1=count%(page.pagenumber)==0?count/(page.pagenumber):count/(page.pagenumber)+1;
        model.addAttribute("page1", page1);
        String s=config.getKeyValue(request.getRealPath("/"),"pagenumber");
        int pagenumber=Integer.parseInt(s);
        
        List<Enterprise> list = enterpriseService.selectAllEnterprise(thispage,pagenumber);
       
   
    model.addAttribute("thispage", thispage+1);
	model.addAttribute("list", list);
		return "enterpriselist";
	}
	
	@RequestMapping("/enterpriseuserlist")
	public String enterpriseuserlist(Integer eid,Model model){
	    List<Province> provice=enterpriseService.getProvince();
        model.addAttribute("map",provice);
		Map<String,List<String>> map1=getType();
		model.addAttribute("map1",map1);
		Enterprise enterprise=enterpriseService.getEnterpriseById(eid);
		List<UserU> user=new ArrayList<UserU>();
		UserU u;
		List<UserEnterpriseKey> usere=enterpriseService.getUserEnterprise(eid);
		for(int i=0;i<usere.size();i++){
		    u=userUservice.getUserUById(usere.get(i).getUid());
		    u.setUserExtend(userUservice.getUserExtend(usere.get(i).getUid()));
		    user.add(u);
		    
		}
		enterprise.setUserU(user);
        model.addAttribute("enterprise", enterprise);
		return "enterpriseuserlist";
	}
	
	@RequestMapping("/upenterprise")
    public String upenterprise(Integer eid,Model model){
        Map<String,List<String>> map1=getType();
        model.addAttribute("map1",map1);
        Enterprise enterprise=enterpriseService.getEnterpriseById(eid);
        String[] addr=enterprise.getEaddress().split("-");
        
        SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String s1 = sdf.format(enterprise.getEtime());
        model.addAttribute("time", s1);
        
        List<Province> provice=enterpriseService.getProvince();
        model.addAttribute("map",provice);
        model.addAttribute("address1", addr[0]);
        List<City> city=enterpriseService.getCity(addr[0]);
        model.addAttribute("city",city);
        model.addAttribute("address2", addr[1]);
        List<Area> area=enterpriseService.getArea(addr[1]);
        model.addAttribute("area",area);
        model.addAttribute("address3", addr[2]);
        model.addAttribute("address4", addr[3]);
        model.addAttribute("enterprise", enterprise);
        return "upenterprise";
    }
	
	@RequestMapping("/upenterprise1")
	public String upenterprise1(Enterprise enterprise,HttpServletRequest request,Model model,
	        String address1,String address2,String address3,String address4,String time) throws ParseException{
		
	    Date d=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(time);
        enterprise.setEtime(d);
	    
	    String eaddress=address1+"-"+address2+"-"+address3+"-"+address4;
	    enterprise.setEaddress(eaddress);
	   	enterpriseService.updateByPrimaryKeySelective(enterprise);
	   	int thispage=0;
	    String s=config.getKeyValue(request.getRealPath("/"),"pagenumber");
        int pagenumber=Integer.parseInt(s);
        thispage=thispage*pagenumber;
        List<Enterprise> list = enterpriseService.selectAllEnterprise(thispage,pagenumber);
        Integer count=enterpriseService.countByExample();
        Integer page1=count%(page.pagenumber)==0?count/(page.pagenumber):count/(page.pagenumber)+1;
        model.addAttribute("page1", page1);
    model.addAttribute("thispage", thispage+1);
	model.addAttribute("list", list);
		return "enterpriselist";
	}
	
	@RequestMapping("/reviewed")
	public String reviewed(Integer eid,Model model){
		Enterprise enterprise=enterpriseService.getEnterpriseById(eid);
        model.addAttribute("enterprise", enterprise);
        SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String s1 = sdf.format(enterprise.getEtime());
        model.addAttribute("time", s1);
		return "reviewed";
	}
	@RequestMapping("/reviewed1")
	public String reviewed1(Integer eid,Model model,Integer status,HttpServletRequest request){
		Enterprise enterprise=enterpriseService.getEnterpriseById(eid);
		enterprise.setEstatus(status);
		enterpriseService.updateStatus(enterprise);
		if(status==2){
			
			//email.toemail(enterprise.getEemail(), "审核结果","审核以通过，可以登陆了！");//这是发送邮件的代码，因为现在邮箱不正确，先注释。
		}
		if(status==3){
			//email.toemail(enterprise.getEemail(), "审核结果","审核未通过，请您把信息输入详细！");//这是发送邮件的代码，因为现在邮箱不正确，先注释。
			
		}
		
		int thispage=0;
		 String s=config.getKeyValue(request.getRealPath("/"),"pagenumber");
         int pagenumber=Integer.parseInt(s);
         thispage=thispage*pagenumber;
        List<Enterprise> list = enterpriseService.selectAllEnterprise(thispage,pagenumber);
        Integer count=enterpriseService.countByExample();
        Integer page1=count%(page.pagenumber)==0?count/(page.pagenumber):count/(page.pagenumber)+1;
        
        
        model.addAttribute("page1", page1);
        model.addAttribute("thispage", thispage+1);
	    model.addAttribute("list", list);
        
		return "enterpriselist";
	}
	
	@RequestMapping("/reviewed2")
	public String reviewed2(String estatuss,Model model,HttpServletRequest request){
		
		String[] es=jsontostring(estatuss);
		for(int i=0;i<es.length;i++){
			Enterprise enterprise=enterpriseService.getEnterpriseById(Integer.parseInt(es[i]));
			enterpriseService.updateStatusById(Integer.parseInt(es[i]),2);
			//email.toemail(enterprise.getEemail(), "审核结果","审核以通过，可以登陆了！");//这是发送邮件的代码，因为现在邮箱不正确，先注释。
		}
		int thispage=0;
		 String s=config.getKeyValue(request.getRealPath("/"),"pagenumber");
         int pagenumber=Integer.parseInt(s);
         thispage=thispage*pagenumber;
        List<Enterprise> list = enterpriseService.selectAllEnterprise(thispage,pagenumber);
        Integer count=enterpriseService.countByExample();
        Integer page1=count%(page.pagenumber)==0?count/(page.pagenumber):count/(page.pagenumber)+1;
        model.addAttribute("page1", page1);
    model.addAttribute("thispage", thispage+1);
	model.addAttribute("list", list);
        
		return "enterpriselist";
	}
	
        @RequestMapping("download")
        public String download(@ProbeParam("message")String message,String chk ,HttpServletRequest request,HttpServletResponse response) throws IOException{
            //填充projects数据
            
            Enterprise enterprise=enterpriseService.getEnterpriseById(Integer.parseInt(chk));
            String fileName=enterprise.getEname();
            ByteArrayOutputStream os = new ByteArrayOutputStream();
            try {
                ExcelUtil.createWorkBook(request,enterprise).write(os);
            } catch (IOException e) {
                e.printStackTrace();
            }
            byte[] content = os.toByteArray();
            InputStream is = new ByteArrayInputStream(content);
            // 设置response参数，可以打开下载页面
            response.reset();
            response.setContentType("application/vnd.ms-excel;charset=utf-8");
            response.setHeader("Content-Disposition", "attachment;filename="+ new String((fileName + ".xls").getBytes(), "iso-8859-1"));
            ServletOutputStream out = response.getOutputStream();
            BufferedInputStream bis = null;
            BufferedOutputStream bos = null;
            try {
                bis = new BufferedInputStream(is);
                bos = new BufferedOutputStream(out);
                byte[] buff = new byte[2048];
                int bytesRead;
                // Simple read/write loop.
                while (-1 != (bytesRead = bis.read(buff, 0, buff.length))) {
                    bos.write(buff, 0, bytesRead);
                }
            } catch (final IOException e) {
                throw e;
            } finally {
                if (bis != null)
                    bis.close();
                if (bos != null)
                    bos.close();
            }
            return null;
        }
	
    @RequestMapping("downpassword")
    @ResponseBody
    public Result downpassword(@ProbeParam("message")String message,HttpServletRequest request){
        Result result=new Result();
        HttpSession session=request.getSession();
        UserU user=(UserU)session.getAttribute("userU");
       
        if(message.equals(user.getDownpassword())){
        	result.setStatus(200);
        }else{
        	result.setStatus(100);
        	result.setMsg("下载密码不正确！");
        }
        return result;
    } 
    
    @RequestMapping("dele")
    @ResponseBody
    public Result dele(Integer eid,HttpServletRequest request){
        Result result=new Result();
        Enterprise enterprise=enterpriseService.getEnterpriseById(eid);
        enterpriseService.dele(enterprise);
        result.setStatus(200);
        return result;
    }  
	 
	@RequestMapping("city")
	@ResponseBody
	public Result city(String name){
	    Result result=new Result();
	    List<City> city=enterpriseService.getCity(name);
	    result.setData(city);
	    return result;
	}
	
	@RequestMapping("area")
    @ResponseBody
    public Result area(String name){
        Result result=new Result();
        List<Area> area=enterpriseService.getArea(name);
        result.setData(area);
        return result;
    }
	
	@RequestMapping("search")
    public String search(String name,Model model){
	    List<Province> provice=enterpriseService.getProvince();
        model.addAttribute("map",provice);
        Map<String,List<String>> map1=getType();
        model.addAttribute("map1",map1);
        return "searchenterprise";
    }
	
	@RequestMapping("searchenterprise")
	@ResponseBody
    public page searchenterprisse(page page,Enterprise enterprise,String address1,String address2,String address3,String address4,
            String amount1,String amount2,HttpServletRequest request){
	    if(page.getThispage()==null){
	        page.setThispage(0);
	    }
	    Integer pagenumber=Integer.parseInt(config.getKeyValue(request.getRealPath("/"), "pagenumber"));
	    String eaddress=address1+"-"+address2+"-"+address3+"-"+address4;
	    enterprise.setEaddress(eaddress);
	    int count=enterpriseService.countByExample1(page.getThispage(),enterprise,amount1,amount2,pagenumber);
	    Integer page1=count%(page.pagenumber)==0?count/(page.pagenumber):count/(page.pagenumber)+1;
        page.setPage(page1);
	    
	    List<Enterprise> list=enterpriseService.searchenterprise(page.getThispage(),enterprise,amount1,amount2,pagenumber);
       
        if(list==null){
            page.setStatus(100);
            page.setMsg("没有企业符合条件");
        }else{
            page.setStatus(200);
            page.setData(list);
        }
        return page;
    }
	
	
    
	@RequestMapping("/fileupload")
    @ResponseBody
    public Result fileupload(@RequestParam(value = "img1", required = false) MultipartFile file,
            HttpServletRequest request,Integer id){
        
        Result result=new Result();
        
        String str=request.getRealPath("/");
        
         String fileName = new Date().getTime()+".png";
         String m=str+"images\\enterprise\\"+fileName;
         long length = file.getSize();
         if(length>1024*1024){
             result.setStatus(100);
             result.setMsg("文件大于1M！");
             return result;
         }
         
        String fileExtendName = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."));
        if(!".png".equals(fileExtendName)){
         result.setStatus(100);
         result.setMsg("只能传png图片！");
         return result;
        }
         try {
             byte[] bytes = file.getBytes();
             BufferedOutputStream stream = new BufferedOutputStream(
                     new FileOutputStream(new File(m)));
            stream.write(bytes);
            
              stream.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
       result.setData(fileName);
       result.setStatus(200);
       Enterprise enterprise=new Enterprise();
       enterprise.setEbusiness(fileName);
       enterprise.setEid(id);
        enterpriseService.updateImg(enterprise);
         return result;
    }
	
	
	@RequestMapping("/fileupload1")
    @ResponseBody
    public Result fileupload1(@RequestParam(value = "img2", required = false) MultipartFile file,
            HttpServletRequest request,Integer id){
        
        Result result=new Result();
        
        String str=request.getRealPath("/");
        
         String fileName = new Date().getTime()+".png";
         String m=str+"images\\enterprise\\tex\\"+fileName;
         long length = file.getSize();
         if(length>1024*1024){
             result.setStatus(100);
             result.setMsg("文件大于1M！");
             return result;
         }
         
        String fileExtendName = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."));
        if(!".png".equals(fileExtendName)){
         result.setStatus(100);
         result.setMsg("只能传png图片！");
         return result;
        }
         try {
             byte[] bytes = file.getBytes();
             BufferedOutputStream stream = new BufferedOutputStream(
                     new FileOutputStream(new File(m)));
            stream.write(bytes);
            
              stream.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
       result.setData(fileName);
       result.setStatus(200);
       Enterprise enterprise=new Enterprise();
       enterprise.setEtex(fileName);
       enterprise.setEid(id);
        enterpriseService.updateImg(enterprise);
         return result;
    }
	
	public Map<String,List<String>> getType(){
		List<String> list=new ArrayList<String>();
		list.add("休闲娱乐");list.add("其他行业");list.add("产业园区");list.add("园林园艺");list.add("PPP项目");list.add("工艺收藏");
		list.add("加工制造");list.add("基础设施");list.add("装备制造");list.add("仓储物流");list.add("现代服务");list.add("供水供气");
		list.add("公路桥梁");list.add("印刷包装");list.add("电子器件");list.add("生物制药");list.add("船舶制造");list.add("钢铁行业");
		list.add("家具装饰");list.add("机械机电");list.add("电器家电");list.add("通信传媒");list.add("能源电力");list.add("水泥行业");
		list.add("物资外贸");list.add("纺织服装");list.add("商业百货");list.add("农药化肥");list.add("医疗器械");list.add("食品行业");
		list.add("轻工化纤");list.add("交通运输");list.add("汽车汽配");list.add("农林牧渔");list.add("建筑建材");list.add("石油化工");
		list.add("环保绿化");list.add("文化教育");list.add("IT互联网");list.add("矿产冶金");list.add("旅游酒店");list.add("房地产业");
		list.add("高新科技");list.add("金融投资");
		Map<String,List<String>> map=new HashMap<>();
		map.put("type", list);
		return map;
	}
	
	public String[] jsontostring(String s){
		String m=s.substring(1,s.length()-1);
		String[] en=m.split(",");
		for(int i=0;i<en.length;i++){
			en[i]=en[i].substring(1, en[i].length()-1);
		}
		return en;
	}
}
