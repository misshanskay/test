package cn.sirbox.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;
import java.util.List;
import java.util.Random;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSenderImpl;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.sun.org.apache.regexp.internal.recompile;

import cn.sirbox.model.Dept;
import cn.sirbox.model.Part;
import cn.sirbox.model.Result;
import cn.sirbox.model.UserU;
import cn.sirbox.model.page;
import cn.sirbox.service.impl.DeptService;
import cn.sirbox.service.impl.PartService;
import cn.sirbox.service.impl.UserUService;
import cn.sirbox.utils.config;
import cn.sirbox.utils.email;
import net.sf.json.JSONArray;

/**
 * Created by X201 on 2016/8/26 0026.
 */
@Controller
@RequestMapping("/user")
public class UserUController {


    @Autowired
    private UserUService userUService;

    @Autowired
    private DeptService deptService;
    
    @Autowired
    private PartService partService;
    
 
    
  
   
    private JavaMailSenderImpl mailSender;
    //进入主页面
    @RequestMapping("/index")
    public String index(HttpServletRequest request) {
    	/*JavaMailSenderImpl mailSender = new JavaMailSenderImpl();
        // 设置参数
        mailSender.setHost("smtp.163.com");
        mailSender.setUsername("15311487686@163.com");
        mailSender.setPassword("han123456");
        SimpleMailMessage smm = new SimpleMailMessage();
        // 设定邮件参数
        smm.setFrom(mailSender.getUsername());
        smm.setTo("982629109@qq.com");
        smm.setSubject("Hello world");
        smm.setText("Hello world via spring mail sender");
        // 发送邮件
        mailSender.send(smm);
        System.out.println(123);*/
        return "index";
    }
    @RequestMapping("/top")
    public String top(HttpServletRequest request,HttpServletResponse response) {
        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext()  
                .getAuthentication()  
                .getPrincipal();  
              
    	HttpSession session=request.getSession();
    	
    	UserU userU=userUService.getUserUByName(userDetails.getUsername());
    	session.setAttribute("userU", userU);
    	/*Cookie cook=new Cookie("uname", userU.getUname());
    	Cookie cook1=new Cookie("upassword", userU.getUpassword());
    	cook.setMaxAge(60*60*24*3);
    	cook1.setMaxAge(60*60*24*3);
    	cook.setPath("/");
    	cook1.setPath("/");
    	response.addCookie(cook);
    	response.addCookie(cook1);*/
    	
        return "_top";
    }
    @RequestMapping("/right")
    public String right() {
        
        return "_left";
    }
    @RequestMapping("/left")
    public String left() {
        
        return "_right";
    }
    //进入注册页面
    @RequestMapping("/register")
    public String register(Model model) {
		List<Dept> dept=deptService.getAllDept();
		StringBuffer sn1=new StringBuffer();
		sn1.append("[");
		sn1=hh(sn1,dept,0);
		sn1.deleteCharAt(sn1.length()-1);
		sn1.append("]");
		String ss=sn1.toString();
		List<Part> list=partService.getAllPart();
		model.addAttribute("list", list);
		model.addAttribute("ztreeno",ss);
        return "register";
    }

    @RequestMapping("/login")
    public String login(HttpServletRequest request,Model model) {
    		
        String s=config.getKeyValue(request.getRealPath("/"),"base");
    		String m=config.getKeyValue(request.getRealPath("/"),"imgsrc");
    		
    		
    		model.addAttribute("imgsrc", m);
    		model.addAttribute("base", s);
            return "login";

    }
    
    @RequestMapping("/find")
    @ResponseBody
    public Result find(String uname) {
    		Result result=new Result();
    		
    	
    		UserU user=userUService.getUserUByName(uname);
    		if(user!=null){
    			result.setStatus(200);
    		}else{
    			result.setStatus(100);
    			return result;
    		}
    		String password=email.toemail(user.getUemail(), "密码找回！");
            user.setUpassword(password);
            userUService.updateByPrimaryKeySelective(user);
    		
            return result;

    }

    @RequestMapping("/aj")
    @ResponseBody
    public String aj(String uname) {

        UserU u=userUService.getUserUByName(uname);
        if(u==null){
            return "success";
        }

        return "";
    }
    
    @RequestMapping("/addu")
    public String register(@RequestParam(value = "img", required = false) MultipartFile file,
            UserU userU, Model model,HttpServletRequest request,String udept,String part){
    	
        String str=request.getRealPath("/");
        
        String fileName = new Date().getTime()+".png";
        String m=str+"userimg\\"+fileName;
        long length = file.getSize();
        if(length>1024*1024){
           return "register";
        }
        
       String fileExtendName = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."));
       if(!".png".equals(fileExtendName)){
           return "register";
       }
        try {
            byte[] bytes = file.getBytes();
            BufferedOutputStream stream = new BufferedOutputStream(
                    new FileOutputStream(new File(m)));
           stream.write(bytes);
           
             stream.close();
       } catch (IOException e) {
           // TODO Auto-generated catch block
           e.printStackTrace();
       }
    	userU.setImgsrc(fileName);
    	 userU.setDid(deptService.getDeptByName(udept).getDid());
        userUService.insertSelective(userU);
       
       
        
        partService.insertUserUPart(userU.getUid(),partService.getPartByName(part).getPid());
        Integer count=userUService.countByUserU();
        Integer page1=count%(page.pagenumber)==0?count/(page.pagenumber):count/(page.pagenumber)+1;
        List<UserU> list = userUService.selectAllUserU(0);
        model.addAttribute("page1",page1);
        model.addAttribute("thispage",1);
        model.addAttribute("list",list);
        return "userulist";
    }
    //进入用户列表页面
    @RequestMapping("/list")
    public String list(Model model){

        Integer count=userUService.countByUserU();
        Integer page1=count%(page.pagenumber)==0?count/(page.pagenumber):count/(page.pagenumber)+1;
        List<UserU> list = userUService.selectAllUserU(0);
        List<UserU> useru=userUService.getAllUserUDept();
		List<Dept> dept=deptService.getAllDept();
		StringBuffer sn=new StringBuffer();
		sn.append("[");
		sn=hhh(sn,useru,dept,0);
		sn.deleteCharAt(sn.length()-1);
		sn.append("]");
		String ss=sn.toString();
		
		model.addAttribute("ztreeno",ss);
        model.addAttribute("page1",page1);
        model.addAttribute("thispage",1);
        model.addAttribute("list",list);
        return "userulist";
    }
    //进入用户树页面
    @RequestMapping("/list1")
	public String login(Model model) {
		
		List<UserU> useru=userUService.getAllUserUDept();
		List<Dept> dept=deptService.getAllDept();
		StringBuffer sn=new StringBuffer();
		sn.append("[");
		sn=hhh(sn,useru,dept,0);
		sn.deleteCharAt(sn.length()-1);
		sn.append("]");
		String ss=sn.toString();
		model.addAttribute("ztreeno",ss);
		return "ztree";
	}
    //用户列表分页显示，5个一页
    @RequestMapping("/all")
    @ResponseBody
    public page selectalluser(page page1) {
        try{
            page1.setStatus(0);
            Integer count=userUService.countByUserU();
            Integer page=count%(page1.getPagenumber())==0?count/(page1.getPagenumber()):count/(page1.getPagenumber())+1;
            page1.setCount(count);
            page1.setPage(page);
            if(page1.getThispage()>=page){
                page1.setThispage(page1.getThispage()-1);
            }
            List<UserU> list = userUService.selectAllUserU(page1.getThispage());
            JSONArray json=JSONArray.fromObject(list);
            page1.setData(json);
        }catch (Exception e){
            page1.setStatus(1);
            page1.setMsg("请求失败");
        }

        return page1;
    }
    //根据id删除用户
    @RequestMapping("/dele")
    @ResponseBody
    public Integer dele(Integer uid,Integer thispage){
        userUService.deleteUserUById(uid);
        return thispage;
    }

    @RequestMapping("/updata")
    public String updata(Integer uid,Model model){
        UserU userU=userUService.getUserUById(uid);
        
        model.addAttribute("userU",userU);
        String pname=userUService.getUserUPart(uid);
        List<Part> list1=partService.getAllPart();
        
		model.addAttribute("pname", pname);
		model.addAttribute("list1", list1);
        return "updata";
    }

    @RequestMapping("/upu")
    public String upu(UserU userU,HttpServletRequest request,Model model){
    	Integer count=userUService.countByUserU();
        Integer page1=count%(page.pagenumber)==0?count/(page.pagenumber):count/(page.pagenumber)+1;
        List<UserU> list = userUService.selectAllUserU(0);
        model.addAttribute("page1",page1);
        model.addAttribute("thispage",1);
        model.addAttribute("list",list);
        userUService.updateByPrimaryKeySelective(userU);
        return "userulist";
    }
    
    @RequestMapping("/moveuser")
	@ResponseBody
	public String moveuser(Integer uid,Integer did) {
		int uu=-uid;
		userUService.updateDeptById(uu,did);
		return "success";
	}
    
    @RequestMapping("/removeuser")
	@ResponseBody
	public String removedept(Integer uid) {
		userUService.deleteUserUById(-uid);
		return "success";
	}
    
    @RequestMapping("/searchu")
   	@ResponseBody
   	public Result seleteuser(String uname) {
    	
   		UserU userU=userUService.getUserUByName(uname);
   		Result result=new Result();
   		if(userU==null){
   			result.setStatus(100);
   			result.setMsg("没有这个用户！");
   		}else{
   			result.setStatus(200);
   			result.setData(userU);
   			
   		}
   		return result;
   	}
    @RequestMapping("/seletepart")
    @ResponseBody
    public Result seletepart(String pname){
    	List<String> list=partService.getRole(pname);
    	Result result=new Result();
    	result.setData(list);
    	return result;
    }
    @RequestMapping("/setup")
    public String setup(HttpServletRequest request,Model model){
    	model.addAttribute("base", config.getKeyValue(request.getRealPath("/"),"base"));
    	model.addAttribute("imgsrc", config.getKeyValue(request.getRealPath("/"),"imgsrc"));
    	return "setup";
    }
    
    
    @RequestMapping("/upbase")
    @ResponseBody
    public Result upbase(HttpServletRequest request,String base){
    	Result result=new Result();
    	config.writeProperties(request.getRealPath("/"),"base", base);
    	String b=config.getKeyValue(request.getRealPath("/"),"base");
    	result.setData(b);
    	return result;
    }
    
    @RequestMapping("/upfile")
    @ResponseBody
    public Result upfile(@RequestParam(value = "file", required = false) MultipartFile file,
            HttpServletRequest request){
    	
    	Result result=new Result();
    	
    	String str=request.getRealPath("/");
    	
    	 String fileName = new Date().getTime()+".png";
    	 config.writeProperties(request.getRealPath("/"),"imgsrc", fileName);
    	 String m=str+"images\\"+fileName;
    	 long length = file.getSize();
         if(length>1024*1024){
        	 result.setStatus(100);
        	 result.setMsg("文件大于1M！");
        	 return result;
         }
         
        String fileExtendName = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."));
    	if(!".png".equals(fileExtendName)){
       	 result.setStatus(100);
       	 result.setMsg("只能传png图片！");
       	 return result;
        }
         try {
        	 byte[] bytes = file.getBytes();
             BufferedOutputStream stream = new BufferedOutputStream(
                     new FileOutputStream(new File(m)));
			stream.write(bytes);
			
			  stream.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
       result.setData(fileName);
result.setStatus(200);
         return result;
    }
    
    
    @RequestMapping("/fileupload")
    @ResponseBody
    public Result fileupload(@RequestParam(value = "file", required = false) MultipartFile file,
            HttpServletRequest request,Integer id){
        
        Result result=new Result();
        
        String str=request.getRealPath("/");
        
         String fileName = new Date().getTime()+".png";
         String m=str+"userimg\\"+fileName;
         long length = file.getSize();
         if(length>1024*1024){
             result.setStatus(100);
             result.setMsg("文件大于1M！");
             return result;
         }
         
        String fileExtendName = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf("."));
        if(!".png".equals(fileExtendName)){
         result.setStatus(100);
         result.setMsg("只能传png图片！");
         return result;
        }
         try {
             byte[] bytes = file.getBytes();
             BufferedOutputStream stream = new BufferedOutputStream(
                     new FileOutputStream(new File(m)));
            stream.write(bytes);
            
              stream.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
       result.setData(fileName);
       result.setStatus(200);
       UserU userU=new UserU();
       userU.setImgsrc(fileName);
       userU.setUid(id);
        userUService.updateUserUImg(userU);
         return result;
    }
    
    //拼接字符串，用户和部门的
    public StringBuffer hhh(StringBuffer sn,List<UserU> useru,List<Dept> dept,Integer i){
		for(Dept d:dept){
			if(d.getPid()==i){
				sn.append("{");
				sn.append("id:"+d.getDid());
				sn.append(",pId:"+d.getPid());
				sn.append(",name:'"+d.getDname());
				
				sn.append("'},");
				sn=hhh(sn,useru,dept,d.getDid());
				
			
		}
		
		}
		for(UserU u:useru){
			if(u.getDid()==i){
				sn.append("{");
				sn.append("id:-"+u.getUid());
				sn.append(",pId:"+i);
				sn.append(",name:'"+u.getUname());
				sn.append("'},");
			}
	}
		return sn;
	}
    //拼接字符串，只有部门的
    public StringBuffer hh(StringBuffer sn,List<Dept> dept,Integer i){
		for(Dept d:dept){
			if(d.getPid()==i){
				sn.append("{");
				sn.append("id:"+d.getDid());
				sn.append(",pId:"+d.getPid());
				sn.append(",name:'"+d.getDname());
				
				sn.append("'},");
				sn=hh(sn,dept,d.getDid());
				
			
		}
		
		}
		
		return sn;
	}
    
    
}