package cn.sirbox.controller;

import java.io.File;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import cn.sirbox.model.UserU;
import cn.sirbox.model.page;
import cn.sirbox.service.impl.UserUService;
import net.sf.json.JSONArray;

/**
 * Created by X201 on 2016/8/26 0026.
 */
@Controller
@RequestMapping("/user")
public class UserUController {


    @Autowired
    private UserUService userUService;

    @RequestMapping("/index")
    public String index(HttpServletRequest request) {

        return "index";
    }
    @RequestMapping("/top")
    public String top(HttpServletRequest request) {
        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext()  
                .getAuthentication()  
                .getPrincipal();  
              
    	HttpSession session=request.getSession();
    	UserU userU=userUService.getUserUByName(userDetails.getUsername());
    	session.setAttribute("userU", userU);
        return "_top";
    }
    @RequestMapping("/right")
    public String right() {
        
        return "_left";
    }
    @RequestMapping("/left")
    public String left() {
        
        return "_right";
    }
    
    @RequestMapping("/register")
    public String register() {

        return "register";
    }

    @RequestMapping("/login")
    public String login(HttpServletRequest request) {

            return "login";

    }

    @RequestMapping("/aj")
    @ResponseBody
    public String aj(String uname) {

        UserU u=userUService.getUserUByName(uname);
        if(u==null){
            return "success";
        }

        return "";
    }
    
    @RequestMapping("/addu")
    public String register(UserU userU, String[] power,Model model,@RequestParam(value = "photo", required = false) MultipartFile file,HttpServletRequest request){
    	
        String path = request.getSession().getServletContext().getRealPath("upload");  
        
        
        String fileName = new Date().getTime()+".jpg";  
          
        File targetFile = new File(path, fileName);  
        if(!targetFile.exists()){  
            targetFile.mkdirs();  
        }  
  
        //保存  
        try {  
            file.transferTo(targetFile);  
        } catch (Exception e) {  
            e.printStackTrace();  
        }
        String fileUrl=request.getContextPath()+"/upload/"+fileName;
    	if(power!=null){
    		for(int i=0;i<power.length;i++){
                userUService.addUserUPower(userU.getUname(),power[i]);
            }
    	}
    	userU.setImgsrc(fileUrl);
        userUService.insertSelective(userU);
        Integer count=userUService.countByExample();
        Integer page1=count%(page.pagenumber)==0?count/(page.pagenumber):count/(page.pagenumber)+1;
        List<UserU> list = userUService.selectAllUserU(0);
        model.addAttribute("page1",page1);
        model.addAttribute("thispage",1);
        model.addAttribute("list",list);
        return "userulist";
    }

    @RequestMapping("/list")
    public String list(Model model){

        Integer count=userUService.countByExample();
        Integer page1=count%(page.pagenumber)==0?count/(page.pagenumber):count/(page.pagenumber)+1;
        List<UserU> list = userUService.selectAllUserU(0);
        model.addAttribute("page1",page1);
        model.addAttribute("thispage",1);
        model.addAttribute("list",list);
        return "userulist";
    }

    @RequestMapping("/all")
    @ResponseBody
    public page selectalluser(page page1) {
        try{
            page1.setStatus(0);
            Integer count=userUService.countByExample();
            Integer page=count%(page1.getPagenumber())==0?count/(page1.getPagenumber()):count/(page1.getPagenumber())+1;
            page1.setCount(count);
            page1.setPage(page);
            if(page1.getThispage()>=page){
                page1.setThispage(page1.getThispage()-1);
            }
            List<UserU> list = userUService.selectAllUserU(page1.getThispage());
            JSONArray json=JSONArray.fromObject(list);
            page1.setJson(json);
        }catch (Exception e){
            page1.setStatus(1);
            page1.setMsg("请求失败");
        }

        return page1;
    }
    @RequestMapping("/dele")
    @ResponseBody
    public Integer dele(Integer uid,Integer thispage){
        userUService.deleteUserUById(uid);
        return thispage;
    }

    @RequestMapping("/updata")
    public String updata(Integer uid,Model model){
        UserU userU=userUService.getUserUById(uid);
        List<String> list=userUService.getUserUPower(userU.getUname());
        model.addAttribute(userU);
        model.addAttribute("list",list);
        return "updata";
    }

    @RequestMapping("/upu")
    @ResponseBody
    public String upu(UserU userU,String[] power,HttpServletRequest request,@RequestParam(value = "photo", required = false) MultipartFile file){
    	 if(file.getOriginalFilename()!=null){
    		 String path = request.getSession().getServletContext().getRealPath("upload");  
    	        
    	       // file.getOriginalFilename()
    	        String fileName = new Date().getTime()+".jpg";  
    	          
    	        File targetFile = new File(path, fileName);  
    	        if(!targetFile.exists()){  
    	            targetFile.mkdirs();  
    	        }  
    	  
    	        //保存  
    	        try {  
    	            file.transferTo(targetFile);  
    	        } catch (Exception e) {  
    	            e.printStackTrace();  
    	        }
    	        String fileUrl=request.getContextPath()+"/upload/"+fileName;
    	        userU.setImgsrc(fileUrl);
    	 }
        
        
    	userUService.deleteUserUPower(userU.getUname());
    	if(power!=null){
    		for(int i=0;i<power.length;i++){
                userUService.addUserUPower(userU.getUname(),power[i]);
            }
    	}
        userUService.updateByPrimaryKeySelective(userU);
        return "success";
    }
}