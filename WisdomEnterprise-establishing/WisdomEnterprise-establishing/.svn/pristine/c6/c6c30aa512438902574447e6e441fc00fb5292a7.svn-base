package cn.sirbox.controller;

import java.io.IOException;
import java.lang.ProcessBuilder.Redirect;
import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.github.pagehelper.PageInfo;

import cn.sirbox.model.City;
import cn.sirbox.model.Matchs;
import cn.sirbox.model.Province;
import cn.sirbox.model.page;
import cn.sirbox.service.MatchsService;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

@RequestMapping("matchs")
@Controller
public class MatchsController {
	
	@Autowired
	private MatchsService matchsService;

	@RequestMapping("/findAll")
	public String findAll(Model model,
			@RequestParam(required = false, value = "thispage", defaultValue = "1") String thispage) {
		
		
		List<Matchs> mlist = matchsService.findAll(thispage);
		PageInfo<Matchs> pageInfo = new PageInfo<Matchs>(mlist);
		Long count = pageInfo.getTotal();
		page page = new page(Integer.parseInt(thispage),Integer.valueOf(count.toString()));
		model.addAttribute("mlist", mlist);
		model.addAttribute("page", page);
		return "/matchs/matchslist";
	}
	
	@RequestMapping("/toQuery")
	public String toQuery(Model model){
		List<Province> plist = matchsService.getProvince();
		model.addAttribute("plist",plist);
		return "/matchs/query";
	}
	
	@RequestMapping("/querycity")
	public void queryCity(String provincecode,HttpServletResponse response) throws IOException{
		
		List<City> clist = matchsService.getCity(provincecode);
		response.getWriter().print(JSONArray.fromObject(clist).toString());
	}
	
	@RequestMapping("/query")
	public String query(Model model, Matchs matchs,@RequestParam(required = false,value="thispage",defaultValue="1")String thispage){
		
		List<Matchs> mlist = matchsService.query(matchs,thispage);
		PageInfo<Matchs> pageInfo = new PageInfo<Matchs>(mlist);
		Long count = pageInfo.getTotal();
		page page = new page(Integer.parseInt(thispage),Integer.valueOf(count.toString()));
		model.addAttribute("mlist", mlist);
		model.addAttribute("page", page);
		model.addAttribute(matchs);
		return "/matchs/matchslist";
	}
	
	@RequestMapping("/delete")
	public String delete(Integer id){
		
		matchsService.delete(id);
		return  "Redirect:findAll.do";	
	}
	
	@RequestMapping("/check")
	public String check(Integer id,Model model){
		
		Matchs matchs  = matchsService.check(id);
		model.addAttribute(matchs);
		return "/matchs/check";
	}
	
	@RequestMapping("/watch")
	public void watch(Integer id,HttpServletResponse response) throws IOException{
		
		Matchs matchs = matchsService.check(id);
		JSONArray jsonArray = new JSONArray();
		jsonArray.add(matchs.getProjectUnit());
		jsonArray.add(matchs.getAddress());
		jsonArray.add(matchs.getLinkman());
		jsonArray.add(matchs.getPhone());
		jsonArray.add(matchs.getEmail());
		jsonArray.add(matchs.getFaxNumber());		
		response.getWriter().write((jsonArray.toString()));
	}
	
	@RequestMapping("toedit")
	public String toEdit(Integer id,Model model){
		
		Matchs matchs = matchsService.check(id);
		List<Province> plist = matchsService.getProvince();
		model.addAttribute("plist",plist);
		model.addAttribute(matchs);
		return "/matchs/toedit";
	}
	
	@RequestMapping("/edit")
	public String edit(Matchs matchs){
		
		matchsService.update(matchs);
		return "Redirect:findAll.do";
	}
	
	@RequestMapping("/export")
	public void exportFile(HttpServletResponse response){
		
		matchsService.exportFile(response);
	}
}
